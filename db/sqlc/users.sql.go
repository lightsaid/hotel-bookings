// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const CreateUser = `-- name: CreateUser :execresult
INSERT INTO users (
    phone_number,
    hashed_password,
    username,
    avatar
) VALUES (
    ?,?,?,?
)
`

type CreateUserParams struct {
	PhoneNumber    string `json:"phone_number"`
	HashedPassword string `json:"hashed_password"`
	Username       string `json:"username"`
	Avatar         string `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateUser,
		arg.PhoneNumber,
		arg.HashedPassword,
		arg.Username,
		arg.Avatar,
	)
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, phone_number, hashed_password, username, avatar, created_at, updated_at, is_deleted FROM users WHERE id = ? and is_deleted = 0
`

func (q *Queries) GetUserByID(ctx context.Context, id uint32) (*User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return &i, err
}

const GetUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, phone_number, hashed_password, username, avatar, created_at, updated_at, is_deleted FROM users WHERE phone_number = ? and is_deleted = 0
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (*User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return &i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT 
    id, 
    phone_number, 
    username, 
    avatar, 
    created_at, 
    updated_at
FROM users
WHERE is_deleted = 0
ORDER BY id
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          uint32    `json:"id"`
	PhoneNumber string    `json:"phone_number"`
	Username    string    `json:"username"`
	Avatar      string    `json:"avatar"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, ListUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Username,
			&i.Avatar,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUsersTotal = `-- name: ListUsersTotal :one
SELECT COUNT(*) as total FROM users WHERE is_deleted = 0
`

func (q *Queries) ListUsersTotal(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, ListUsersTotal)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const UpdateUser = `-- name: UpdateUser :exec
UPDATE 
    users 
SET
    hashed_password = COALESCE(?, hashed_password),
    username = COALESCE(?, username),
    avatar = COALESCE(?, avatar)
WHERE 
    id = ? AND is_deleted = 0
`

type UpdateUserParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	Username       sql.NullString `json:"username"`
	Avatar         sql.NullString `json:"avatar"`
	ID             uint32         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, UpdateUser,
		arg.HashedPassword,
		arg.Username,
		arg.Avatar,
		arg.ID,
	)
	return err
}

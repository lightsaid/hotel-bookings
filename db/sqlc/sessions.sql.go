// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const CreateSession = `-- name: CreateSession :execresult
INSERT INTO sessions (
    token_id,
    user_id,
    refresh_token,
    user_agent,
    client_ip,
    expires_at,
    login_type
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateSessionParams struct {
	TokenID      string    `json:"token_id"`
	UserID       uint32    `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
	LoginType    int32     `json:"login_type"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateSession,
		arg.TokenID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
		arg.LoginType,
	)
}

const GetSessionByTokenID = `-- name: GetSessionByTokenID :one
SELECT id, token_id, user_id, refresh_token, user_agent, client_ip, expires_at, created_at, login_type FROM sessions WHERE token_id = ? LIMIT 1
`

func (q *Queries) GetSessionByTokenID(ctx context.Context, tokenID string) (*Session, error) {
	row := q.db.QueryRowContext(ctx, GetSessionByTokenID, tokenID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LoginType,
	)
	return &i, err
}
